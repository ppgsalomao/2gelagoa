%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.3 (Build 19D76) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 400 400
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 400 400
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: JKGMVA+Helvetica-Bold
%!FontType1-1.0: JKGMVA+Helvetica-Bold 1.0000.1.0000
14 dict begin
/FontName /JKGMVA+Helvetica-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /L put
dup 34 /A put
dup 35 /G put
dup 36 /O put
dup 37 /R put
dup 38 /J put
dup 39 /one put
dup 40 /nine put
dup 41 /seven put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2084 1 index div -985 2 index div 2942 3 index div 2374 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/one 1 def
/seven 2 def
/nine 3 def
/A 4 def
/G 5 def
/J 6 def
/L 7 def
/O 8 def
/R 9 def
/uni20BE 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-2084 -985 2942 2374} readonly def
/UniqueID 4396998 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB282915F131C0C1972474AA95A3C190204D99DA4DD48BE293602C24D34CEFAFE0A128C8C1FE639035CFA197F68D72F06F7E0F5D43F9D6B71137DEBB264298EF3A55556F9273D53CB35A62F06548B64901898720714C8157FE727B10462415D00F5AF818F63AD2A2543C2B4B899B570B8DC9FA9DF7A05BD529F5C32A6464A077BF85E8AC848CC5D113500142FCEB760E87CCF17CD3FAFEDC4C200DB12F30D6F944FDD66CDF0B30B03C005958DF4FA0DB37C5D84BC6AE7D6932E027E175AC71450D9093CFCE7526DCB2C240187F13B8890005591EA4F937594887107767E1E35B1077F1D18D1AD5FA81C1C626C5A525BDFC13A1D60070A2DB8E3525E12A7CF0CFC63BF763D42E542F0D5EB2B65173AEB275216496DADBDF2F3225922A07BC4D4B4C506212A510B2A0F04808664411DA8DE0D7E9F5F47E53E2F2DC7C1660996295755D021CAC3F0FA143F3F9C1E19B003599273F16B48D7F4644C644D2A0F9C9948271347FA8F5C44CAA1E20925401AF7EA0CBFD79340683A81845422CFA3B7E113C627B4D530984832F81CB598B2E6E0FDAF2E6472A2BABF4749B0F8EB83795988C93992433C0D69FEBC208ACBCD4E892B9E07E956BA538FF3BD63D3F61E490D32E6BE59679ECDDD03E60C64633D478A6468BD7989117DAB9276099A3555D677FFCFD10038D8FCE1AE3A9A9C16BD1C2371211C46D9534CF83C35054CCA0BAA50C8A96610D932E6328E6732AED967D27DA416F8ACEF476A0D134EC5BD84ECBD0267C8122131A7

9C58055D0A03C8207F66E5B62361CF0258A67160AF65DD0C6E212BEF060E4E3D180A216E78B7140B84B48172FAE09CA8A579061478DB484A2029C2F895B52CBBBDE824D504CD7203D9360EFE6973B437C4D2EED1663BEDAA5A4FDF8339EFBF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/JKGMVA+Helvetica-Bold cguidfix
/F1.1/JKGMVA+Helvetica-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.97254902 0.090196081 0 sc
q
200 0 m
310.45694 0 400 89.543053 400 200 c
400 310.45694 310.45694 400 200 400 c
89.543053 400 0 310.45694 0 200 c
0 89.543053 89.543053 0 200 0 c
h
W*
0 0 400 400 rc
-5 405 m
405 405 l
405 -5 l
-5 -5 l
h
f
Q
0.31764707 0.35294119 0 sc
q
0 0 400 400 rc
1 0 0 -1 146 75 cm
/F1.1[ 30 0 0 -30 0 0]sf
0 29 m
(!"#$")[ 18.325195 21.665039 23.334961 23.334961 0.000000 ] xS
1 1 1 sc
1 0 0 -1 180 45 cm
0 29 m
(%&)[ 21.665039 0.000000 ] xS
Q
1 1 1 sc
q
132.17587 340.32852 m
151.09898 363.53009 171.49786 352.5097 174.19319 349.5174 c
170.68961 344.71396 161.99512 332.13702 136.90822 333.62308 c
136.90822 333.62308 132.17587 340.32852 132.17587 340.32852 c
h
W*
0 0 400 400 rc
127.17587 359.75745 m
179.19319 359.75745 l
179.19319 328.50186 l
127.17587 328.50186 l
h
f
Q
q
268.21948 340 m
249.29671 363.20157 228.69533 352.75226 226 349.75995 c
229.50359 344.95648 238.40057 331.8085 263.48746 333.29453 c
263.48746 333.29453 268.21948 340 268.21948 340 c
h
W*
0 0 400 400 rc
273.21948 359.70438 m
221 359.70438 l
221 328.17816 l
273.21948 328.17816 l
h
f
Q
q
103.88626 322.31979 m
100.77203 350.2374 118.14058 355.30222 126.70009 356.39301 c
126.13576 331.44809 113.32874 333.23648 111.61658 328.10461 c
111.31644 328.50562 103.88626 322.31979 103.88626 322.31979 c
h
W*
0 0 400 400 rc
98.51709 361.39301 m
131.70009 361.39301 l
131.70009 317.31979 l
98.51709 317.31979 l
h
f
Q
q
295.81384 322.31979 m
298.92807 350.2374 281.55951 355.30222 273 356.39301 c
273.56433 331.44809 286.37134 333.23648 288.0835 328.10461 c
288.38367 328.50562 295.81384 322.31979 295.81384 322.31979 c
h
W*
0 0 400 400 rc
301.18298 361.39301 m
268 361.39301 l
268 317.31979 l
301.18298 317.31979 l
h
f
Q
q
109.8035 314.11935 m
134.38573 305.11044 142.07393 314.08777 149.92715 315.45688 c
149.92715 319.88449 140.37483 326.6774 116.77322 320.45056 c
113.56944 319.60333 109.8035 314.11935 109.8035 314.11935 c
h
W*
0 0 400 400 rc
104.8035 327.95834 m
154.92715 327.95834 l
154.92715 305.1564 l
104.8035 305.1564 l
h
f
Q
q
290.92715 314.11935 m
266.34494 305.11044 258.65674 314.08777 250.8035 315.45688 c
250.8035 319.88449 260.35583 326.6774 283.95743 320.45056 c
287.16122 319.60333 290.92715 314.11935 290.92715 314.11935 c
h
W*
0 0 400 400 rc
295.92715 327.95834 m
245.8035 327.95834 l
245.8035 305.1564 l
295.92715 305.1564 l
h
f
Q
q
82.144051 293.46466 m
62.597664 318.34338 85.195259 338.90823 85.195259 338.90823 c
99.957603 325.86353 94.517784 312.35535 87.473251 302.90323 c
84.727264 298.45053 83.225418 295.17462 82.144051 293.46466 c
h
W*
0 0 400 400 rc
69.182907 343.90823 m
99.553963 343.90823 l
99.553963 288.46466 l
69.182907 288.46466 l
h
f
Q
q
318.17007 293.43924 m
338.67599 318.31796 315.00104 338.90823 315.00104 338.90823 c
299.51401 325.86353 305.22086 312.35535 312.61121 302.90323 c
315.492 298.45053 317.03564 295.1492 318.17007 293.43924 c
h
W*
0 0 400 400 rc
331.52902 343.90823 m
300.18289 343.90823 l
300.18289 288.43924 l
331.52902 288.43924 l
h
f
Q
q
89.466927 290.17435 m
104.31368 309.77695 131.60362 306.29013 135.98236 298.51471 c
134.12279 293.57761 116.28542 285.47546 105.7182 286.7106 c
99.365959 287.45306 93.677612 290.17435 89.466927 290.17435 c
h
W*
0 0 400 400 rc
84.466927 309.69366 m
140.98236 309.69366 l
140.98236 281.58417 l
84.466927 281.58417 l
h
f
Q
q
310.70132 290.04382 m
295.85455 309.64639 267.52579 306.29013 263.14703 298.51471 c
265.00662 293.57761 282.84399 285.47546 293.41119 286.7106 c
299.76346 287.45306 306.49063 290.04382 310.70132 290.04382 c
h
W*
0 0 400 400 rc
315.70132 309.63757 m
258.14703 309.63757 l
258.14703 281.58417 l
315.70132 281.58417 l
h
f
Q
q
71.591225 259.6423 m
60.475693 265.74542 55.372105 274.86481 54.01466 284.74628 c
52.657215 294.62775 62.602142 306.22357 62.635033 306.22357 c
71.591225 295.63892 75.656754 284.8063 74.60965 273.06897 c
76.382759 266.95508 77.188637 262.77853 71.591225 259.6423 c
h
W*
0 0 400 400 rc
48.887352 311.22357 m
80.929161 311.22357 l
80.929161 254.6423 l
48.887352 254.6423 l
h
f
Q
q
328.72794 259.6423 m
339.84348 265.74542 344.94705 274.86481 346.3045 284.74628 c
347.66196 294.62775 337.71701 306.22357 337.68414 306.22357 c
328.72794 295.63892 324.66241 284.8063 325.7095 273.06897 c
323.9364 266.95508 323.13052 262.77853 328.72794 259.6423 c
h
W*
0 0 400 400 rc
351.43182 311.22357 m
319.39001 311.22357 l
319.39001 254.6423 l
351.43182 254.6423 l
h
f
Q
q
81.271828 260.95984 m
84.757523 268.24152 92.113319 275.47128 97.466896 277.85464 c
103.34676 279.91916 111.63548 279.40134 114.89254 274.95721 c
106.86517 265.20435 102.10081 256.17294 80.455765 256.66061 c
76.537796 255.03719 78.828453 260.34384 81.271828 260.95984 c
h
W*
0 0 400 400 rc
73.345505 284.01785 m
119.89254 284.01785 l
119.89254 251.35326 l
73.345505 251.35326 l
h
f
Q
q
318.96622 260.95984 m
315.48053 268.24152 308.12473 275.47128 302.77115 277.85464 c
296.8913 279.91916 288.60257 279.40134 285.34549 274.95721 c
293.37286 265.20435 298.13724 256.17294 319.78229 256.66061 c
323.70026 255.03719 321.40958 260.34384 318.96622 260.95984 c
h
W*
0 0 400 400 rc
326.89255 284.01785 m
280.34549 284.01785 l
280.34549 251.35326 l
326.89255 251.35326 l
h
f
Q
q
81.61161 224.7467 m
88.953812 252.47838 104.22564 251.11893 109.16215 253.38327 c
108.14256 248.18839 110.26611 240.86159 103.01604 231.31688 c
95.765961 221.77217 92.236191 219.04704 82.620384 218.44109 c
80.555847 217.87558 77.618607 219.25406 81.61161 224.7467 c
h
W*
0 0 400 400 rc
74.629547 258.38327 m
114.16215 258.38327 l
114.16215 213.32368 l
74.629547 213.32368 l
h
f
Q
q
318.18008 224.7467 m
310.83789 252.47838 295.56607 251.11893 290.62955 253.38327 c
291.64914 248.18839 289.5256 240.86159 296.77567 231.31688 c
304.02576 221.77217 307.55551 219.04704 317.17133 218.44109 c
319.23584 217.87558 322.1731 219.25406 318.18008 224.7467 c
h
W*
0 0 400 400 rc
325.16214 258.38327 m
285.62955 258.38327 l
285.62955 213.32368 l
325.16214 213.32368 l
h
f
Q
q
74.103363 217.75745 m
61.475636 217.75745 50.916077 230.08794 46.886021 237.86342 c
43.537243 246.31998 45.389244 255.58481 47.157288 259.22885 c
70.056282 253.38327 67.969528 228.66476 71.792755 229.50589 c
75.109726 224.32619 77.545219 221.54195 74.103363 217.75745 c
h
W*
0 0 400 400 rc
40.02536 264.22885 m
80.77224 264.22885 l
80.77224 212.75745 l
40.02536 212.75745 l
h
f
Q
q
325.69424 217.75745 m
338.32196 217.75745 348.88153 230.08794 352.91159 237.86342 c
356.26038 246.31998 354.40836 255.58481 352.64032 259.22885 c
329.74133 253.38327 331.82806 228.66476 328.00485 229.50589 c
324.68787 224.32619 322.25238 221.54195 325.69424 217.75745 c
h
W*
0 0 400 400 rc
359.77225 264.22885 m
319.02536 264.22885 l
319.02536 212.75745 l
359.77225 212.75745 l
h
f
Q
q
84.279762 192.46558 m
61.906639 183.01927 42.230209 206.60149 46.315578 217.75745 c
55.701191 209.21642 63.098175 214.58908 75.77224 207.17574 c
86.533546 202.4467 89.535042 196.57184 84.279762 192.46558 c
h
W*
0 0 400 400 rc
40.77457 222.75745 m
91.80468 222.75745 l
91.80468 185.28171 l
40.77457 185.28171 l
h
f
Q
q
316.29947 192.46558 m
338.67261 183.01927 358.34903 206.60149 354.26367 217.75745 c
344.87805 209.21642 337.48108 214.58908 324.80701 207.17574 c
314.04572 202.4467 311.04422 196.57184 316.29947 192.46558 c
h
W*
0 0 400 400 rc
359.80469 222.75745 m
308.77457 222.75745 l
308.77457 185.28171 l
359.80469 185.28171 l
h
f
Q
q
104.73001 179.65245 m
102.39758 192.07654 108.27795 194.05374 107.88296 204.84651 c
107.48103 215.82904 104.69839 219.97308 102.39758 223.60405 c
92.460388 218.84848 88.407104 210.98045 90.237732 200 c
92.477356 188.50188 97.308113 181.71936 104.73001 179.65245 c
h
W*
0 0 400 400 rc
84.81057 228.60405 m
112.90208 228.60405 l
112.90208 174.65245 l
84.81057 174.65245 l
h
f
Q
q
295.98264 179.65245 m
298.31506 192.07654 292.43469 194.05374 292.82968 204.84651 c
293.23163 215.82904 296.01425 219.97308 298.31506 223.60405 c
308.25226 218.84848 312.30554 210.98045 310.47491 200 c
308.23529 188.50188 303.40454 181.71936 295.98264 179.65245 c
h
W*
0 0 400 400 rc
315.9021 228.60405 m
287.81058 228.60405 l
287.81058 174.65245 l
315.9021 174.65245 l
h
f
Q
q
105.07397 165.06943 m
90.710365 154.25371 63.327213 170.36331 58.969296 177.7558 c
87.172523 186.29889 90.342415 177.4881 98.856323 171.47136 c
104.64662 170.25648 105.07397 169.0743 105.07397 165.06943 c
h
W*
0 0 400 400 rc
53.969296 186.30322 m
110.07397 186.30322 l
110.07397 156.44196 l
53.969296 156.44196 l
h
f
Q
q
295.47 165.06943 m
309.83362 154.25371 337.21677 170.36331 341.57468 177.7558 c
313.37146 186.29889 310.20157 177.4881 301.68765 171.47136 c
295.89734 170.25648 295.47 169.0743 295.47 165.06943 c
h
W*
0 0 400 400 rc
346.57468 186.30322 m
290.47 186.30322 l
290.47 156.44196 l
346.57468 156.44196 l
h
f
Q
q
124.91041 161.87672 m
107.85746 173.46469 115.21527 198.36667 116.83868 201.13519 c
130.57686 189.88554 138.29788 167.73788 132.00092 156.93448 c
129.30132 158.28648 128.06839 156.93448 124.91041 161.87672 c
h
W*
0 0 400 400 rc
108.86832 206.13519 m
139.22307 206.13519 l
139.22307 151.93448 l
108.86832 151.93448 l
h
f
Q
q
275.78265 161.87672 m
292.8356 173.46469 285.47781 198.36667 283.8544 201.13519 c
270.11621 189.88554 262.3952 167.73788 268.69217 156.93448 c
271.39175 158.28648 272.62469 156.93448 275.78265 161.87672 c
h
W*
0 0 400 400 rc
291.82474 206.13519 m
261.47 206.13519 l
261.47 151.93448 l
291.82474 151.93448 l
h
f
Q
q
126.46503 149.05974 m
109.9437 147.6954 111.63796 154.98914 102.26669 154.98914 c
92.895424 154.98914 89.81057 149.05974 77.497795 149.05974 c
80.499947 141.16621 110.1433 125.63568 130.04698 146.92062 c
130.04698 149.05974 128.94022 149.05974 126.46503 149.05974 c
h
W*
0 0 400 400 rc
72.497795 159.98914 m
135.04698 159.98914 l
135.04698 131.1622 l
72.497795 131.1622 l
h
f
Q
q
274.38196 149.05974 m
290.90329 147.6954 289.20901 154.98914 298.58029 154.98914 c
307.95157 154.98914 311.03641 149.05974 323.34918 149.05974 c
320.34705 141.16621 290.70367 125.63568 270.79999 146.92062 c
270.79999 149.05974 271.90677 149.05974 274.38196 149.05974 c
h
W*
0 0 400 400 rc
328.34918 159.98914 m
265.79999 159.98914 l
265.79999 131.1622 l
328.34918 131.1622 l
h
f
Q
q
173.44078 136.91402 m
174.24951 159.32661 143.31645 176.2596 141.61729 177.01303 c
139.53758 165.22015 149.00334 145.98399 168.23343 138.77042 c
172.7305 133.0106 172.04839 133.44336 173.44078 136.91402 c
h
W*
0 0 400 400 rc
136.33501 182.01303 m
178.45636 182.01303 l
178.45636 129.36002 l
136.33501 129.36002 l
h
f
Q
q
228.35059 136.91402 m
227.54187 159.32661 258.47491 176.2596 260.17407 177.01303 c
262.25378 165.22015 252.78802 145.98399 233.55794 138.77042 c
229.06088 133.0106 229.743 133.44336 228.35059 136.91402 c
h
W*
0 0 400 400 rc
265.45636 182.01303 m
223.33501 182.01303 l
223.33501 129.36002 l
265.45636 129.36002 l
h
f
Q
q
163.29851 131.07559 m
150.26898 127.95803 149.27986 132.97456 139.95422 132.05537 c
130.62859 131.13618 119.23826 125.21223 116.97635 120.56426 c
127.42159 120.56426 127.42159 115.7094 139.95422 115.7094 c
152.48685 115.7094 167.18498 126.93165 169.31808 128.58287 c
172.0899 131.66771 170.52275 136.1622 163.29851 131.07559 c
h
W*
0 0 400 400 rc
111.97635 138.37637 m
175.606 138.37637 l
175.606 110.7094 l
111.97635 110.7094 l
h
f
Q
q
238.28384 131.07559 m
251.31337 127.95803 252.30249 132.97456 261.62814 132.05537 c
270.95377 131.13618 282.34409 125.21223 284.60602 120.56426 c
274.16077 120.56426 274.16077 115.7094 261.62814 115.7094 c
249.0955 115.7094 234.39737 126.93165 232.26427 128.58287 c
229.49245 131.66771 231.0596 136.1622 238.28384 131.07559 c
h
W*
0 0 400 400 rc
289.60602 138.37637 m
225.97635 138.37637 l
225.97635 110.7094 l
289.60602 110.7094 l
h
f
Q
0.97647059 0.95294118 0 sc
q
132.17622 340.32852 m
84.91851 319.09723 72.992271 280.15186 69.948616 246.66927 c
74.701385 149.51694 163.56764 133.1676 179.95155 124.00516 c
159.99889 122.37192 156.70425 109.31611 127.65788 109.31611 c
110.81054 109.31611 69.948616 147.96448 62.602142 75.509483 c
93.812569 102.09299 76.006264 72.091782 122.7865 72.091782 c
173.11203 72.091782 188.05379 117.58132 200 115.8656 c
200.39569 115.8656 200.39569 131.04634 200.39569 131.04634 c
181.60443 131.04634 74.273354 163.6769 80.907692 246.66927 c
80.907692 283.64252 99.574532 312.62714 136.90822 333.62308 c
133.75356 338.09338 132.17622 340.32852 132.17622 340.32852 c
h
W*
0 0 400 400 rc
57.602142 345.32852 m
205.39569 345.32852 l
205.39569 67.091782 l
57.602142 67.091782 l
h
f
Q
q
268.21948 340 m
315.47717 318.76871 327.40341 279.82333 330.44708 246.34074 c
325.69431 149.1884 236.82805 132.83907 220.44414 123.67663 c
240.3968 122.04339 243.69144 108.98758 272.73782 108.98758 c
289.58514 108.98758 330.44708 147.63596 337.79355 75.180954 c
306.58313 101.76447 324.38943 71.763245 277.60919 71.763245 c
227.28366 71.763245 211.94621 117.58132 200 115.8656 c
199.60431 115.8656 200 130.99088 200 130.99088 c
218.79126 130.99088 326.12234 163.34836 319.48801 246.34074 c
319.48801 283.314 300.82117 312.29861 263.48746 333.29453 c
266.64215 337.76483 268.21948 340 268.21948 340 c
h
W*
0 0 400 400 rc
342.79355 345 m
194.82414 345 l
194.82414 66.763245 l
342.79355 66.763245 l
h
f
Q
q
161.57088 270.14169 m
161.57088 327.01294 239.32651 319.97653 239.32651 270.14169 c
239.32651 270.14169 239.32651 265.64771 239.32651 256.6597 c
221.61473 256.6597 l
221.61473 265.64771 221.61473 270.14169 221.61473 270.14169 c
221.61473 301.21933 178.06374 301.21933 178.06374 270.14169 c
176.06686 270.14169 161.57088 270.14169 161.57088 270.14169 c
h
W*
0 0 400 400 rc
156.57088 315.19989 m
244.32651 315.19989 l
244.32651 251.65971 l
156.57088 251.65971 l
h
f
Q
q
180.38583 223.2334 m
160.94484 219.9259 152.71114 204.24918 155.68472 176.20325 c
155.68472 176.20325 183.56532 176.20325 239.32651 176.20325 c
239.32651 198.33073 l
180.38583 198.33073 l
180.38583 223.2334 l
h
W*
0 0 400 400 rc
150.093 228.2334 m
244.32651 228.2334 l
244.32651 171.20325 l
150.093 171.20325 l
h
f
Q
1 1 1 sc
q
217 283 m
217 256 l
241 256 l
241 226 l
217 226 l
217 200 l
183 200 l
183 226 l
158 226 l
158 256 l
183 256 l
183 283 l
217 283 l
h
W*
0 0 400 400 rc
153 288 m
246 288 l
246 195 l
153 195 l
h
f
Q
0.31764707 0.35294119 0 sc
q
192.91251 236.1321 m
192.91251 236.1321 192.91251 206.21016 192.91251 206.21016 c
200 203.10379 200.5321 203.10379 208.21834 205.82854 c
208.21834 205.82854 208.21834 236.1321 208.21834 236.1321 c
230.82854 249.69794 223.71754 234.91885 223.71754 234.91885 c
238.32651 228.59891 238.32651 252.19864 229.15762 252.19864 c
217.15341 252.19864 217.88013 247.9115 208.21834 247.9115 c
208.21834 264.83246 205.4789 275.04401 200 278.5462 c
194.9621 275.20267 192.59959 264.99109 192.91251 247.9115 c
182.31857 247.9115 183.47298 252.19864 174.09229 252.19864 c
161.79857 252.19864 162.73769 229.41115 178.21164 234.91885 c
178.21164 234.91885 172.22873 249.69794 192.91251 236.1321 c
h
W*
0 0 400 400 rc
160.65257 283.5462 m
240.472 283.5462 l
240.472 198.83034 l
160.65257 198.83034 l
h
f
Q
1 1 1 sc
q
0 0 400 400 rc
1 0 0 -1 166 393 cm
/F1.1[ 31 0 0 -31 0 0]sf
0 30 m
('\('\))[ 17.240723 17.240723 17.240723 0.000000 ] xS
ep
end
